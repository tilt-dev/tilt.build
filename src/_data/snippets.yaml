---
# Tilt Snippets Library - examples to get new users going
#
# Format of this file:
#
# snippet:
#   title: Title
#   description: Description
#   code: |
#     Code
#   tags: # corresponds to the 'filter by' tags
#   - docker
#   - k8s
#   release_stage: Release Stage (beta|experimental|released|deprecated)
#   docs_link: Link to Docs page (usually a relative path)
#

docker_build_simple:
  title: Basic docker_build
  description: Build a docker image
  code: |
    # docker build -t companyname/frontend ./frontend
    docker_build("companyname/frontend", "frontend")
  tags:
  - docker
  - docker_build
  release_stage: released
  docs_link: /tiltfile_concepts.html#build

docker_build_inline:
  title: Docker build with inline Dockerfile
  description: Build a docker image with an inline Dockerfile that uses nginx and provided static assets
  code: |
    dockerfile="""
    FROM nginx:latest
    COPY . /usr/share/nginx/html
    """
    docker_build("companyname/assets", "./assets", dockerfile_contents=dockerfile)
  tags:
  - docker
  - docker_build
  release_stage: released

k8s_yaml_simple:
  title: Apply K8s yaml
  description: Apply k8s yaml manifest files
  code: |
    # one static YAML file
    k8s_yaml('app.yaml')

    # multiple YAML files in one call
    k8s_yaml(['foo.yaml', 'bar.yaml'])
  tags:
  - k8s
  - k8s_yaml
  release_stage: released
  docs_link: /tiltfile_concepts.html#deploy

k8s_yaml_kustomize:
  title: Apply K8s Kustomize templates
  description: Apply K8s manifests results from Kustomize
  code: |
    k8s_yaml(kustomize('kustomize_dir'))
  tags:
  - k8s
  - k8s_yaml
  - kustomize
  release_stage: released
  docs_link: /tiltfile_concepts.html#deploy

k8s_yaml_helm:
  title: Apply K8s Helm templates
  description: Apply K8s manifests results from a local Helm chart
  code: |
    k8s_yaml(helm('chart_dir'))
  tags:
  - k8s
  - k8s_yaml
  - helm
  release_stage: released
  docs_link: /tiltfile_concepts.html#deploy

k8s_yaml_custom:
  title: Apply output from custom command
  description: Use output from a custom command to apply to the cluster
  code: |
    text = local('./foo.py') # runs command foo.py
    k8s_yaml(text)
  tags:
  - k8s
  - k8s_yaml
  - local
  release_stage: released
  docs_link: /tiltfile_concepts.html#custom-commands

k8s_resource_port_forward:
  title: Create a port-forward to a container
  description: Set up a port-forward to a resource's default container
  code: |
    # connect localhost:9000 to container port 9000
    k8s_resource(
      workload='frontend',
      port_forwards=9000
    )
  tags:
  - k8s
  - k8s_resource
  - port_forward
  release_stage: released
  docs_link: /tiltfile_concepts.html#configuring-kubernetes-resources

k8s_resource_config1:
  title: Configure a K8s resource
  description: Associate a secret and a volume to a service
  code: |
    k8s_resource(
      workload='frontend',
      objects=['frontend:secret', 'frontend:volume']
    )
  tags:
  - k8s
  - k8s_resource
  release_stage: released
  docs_link: /tiltfile_concepts.html#configuring-kubernetes-resources

k8s_resource_config2:
  title: Create a K8s resource from existing objects
  description: Make a new resource consisting of some objects necessary for cluster setup
  code: |
    k8s_resource(
      objects=['my-ns:namespace', 'kafka:crd', 'some-ingress:ingress'],
      new_name='cluster-setup',
    )
  tags:
  - k8s
  - k8s_resource
  release_stage: released
  docs_link: /tiltfile_concepts.html#configuring-kubernetes-resources
